/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x55, 0x4e, 0x44, 0x45, 0x52, 0x20, 0x2d, 0x20, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0xa, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x0, // @0 "UNDER - VOLTAGE?FAULT"
    0x4f, 0x56, 0x45, 0x52, 0x20, 0x2d, 0x20, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0xa, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x0, // @22 "OVER - VOLTAGE?FAULT"
    0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x0, // @43 "PERIPHERAL STATUS"
    0x48, 0x56, 0x20, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x53, 0x0, // @61 "HV VOLTAGES"
    0x53, 0x65, 0x67, 0x33, 0x2d, 0x53, 0x65, 0x67, 0x34, 0x0, // @73 "Seg3-Seg4"
    0x53, 0x65, 0x67, 0x31, 0x2d, 0x53, 0x65, 0x67, 0x32, 0x0, // @83 "Seg1-Seg2"
    0x43, 0x75, 0x72, 0x72, 0x6e, 0x65, 0x74, 0x3a, 0x0, // @93 "Currnet:"
    0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x0, // @102 "Voltage:"
    0x2, 0x0, // @111 "<>"
    0x42, 0x4d, 0x53, 0x31, 0x30, 0xa, 0xa, 0x0, // @113 "BMS10??"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x31, 0x34, 0x0, // @121 "CELL 14"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x31, 0x33, 0x0, // @129 "CELL 13"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x31, 0x31, 0x0, // @137 "CELL 11"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x31, 0x32, 0x0, // @145 "CELL 12"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x31, 0x30, 0x0, // @153 "CELL 10"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x35, 0x0, // @161 "CELL 5"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x39, 0x0, // @168 "CELL 9"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x33, 0x0, // @175 "CELL 3"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x36, 0x0, // @182 "CELL 6"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x38, 0x0, // @189 "CELL 8"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x37, 0x0, // @196 "CELL 7"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x34, 0x0, // @203 "CELL 4"
    0x42, 0x4d, 0x53, 0x20, 0x48, 0x56, 0x0, // @210 "BMS HV"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x31, 0x0, // @217 "CELL 1"
    0x43, 0x45, 0x4c, 0x4c, 0x20, 0x32, 0x0, // @224 "CELL 2"
    0x53, 0x54, 0x41, 0x54, 0x45, 0x3a, 0x0, // @231 "STATE:"
    0x42, 0x4d, 0x53, 0x33, 0xa, 0xa, 0x0, // @238 "BMS3??"
    0x42, 0x4d, 0x53, 0x35, 0xa, 0xa, 0x0, // @245 "BMS5??"
    0x42, 0x4d, 0x53, 0x39, 0xa, 0xa, 0x0, // @252 "BMS9??"
    0x42, 0x4d, 0x53, 0x34, 0xa, 0xa, 0x0, // @259 "BMS4??"
    0x42, 0x4d, 0x53, 0x38, 0xa, 0xa, 0x0, // @266 "BMS8??"
    0x42, 0x4d, 0x53, 0x20, 0x31, 0x30, 0x0, // @273 "BMS 10"
    0x42, 0x4d, 0x53, 0x20, 0x35, 0x0, // @280 "BMS 5"
    0x42, 0x4d, 0x53, 0x20, 0x39, 0x0, // @286 "BMS 9"
    0x42, 0x4d, 0x53, 0x20, 0x36, 0x0, // @292 "BMS 6"
    0x42, 0x4d, 0x53, 0x32, 0xa, 0x0, // @298 "BMS2?"
    0x42, 0x4d, 0x53, 0x20, 0x34, 0x0, // @304 "BMS 4"
    0x42, 0x4d, 0x53, 0x20, 0x33, 0x0, // @310 "BMS 3"
    0x42, 0x4d, 0x53, 0x20, 0x32, 0x0, // @316 "BMS 2"
    0x42, 0x4d, 0x53, 0x20, 0x31, 0x0, // @322 "BMS 1"
    0x42, 0x4d, 0x53, 0x37, 0xa, 0x0, // @328 "BMS7?"
    0x42, 0x4d, 0x53, 0x20, 0x38, 0x0, // @334 "BMS 8"
    0x54, 0x65, 0x6d, 0x70, 0x3a, 0x0, // @340 "Temp:"
    0x42, 0x4d, 0x53, 0x20, 0x37, 0x0, // @346 "BMS 7"
    0x42, 0x4d, 0x53, 0x36, 0xa, 0x0, // @352 "BMS6?"
    0x41, 0x49, 0x52, 0x2b, 0x0, // @358 "AIR+"
    0x6b, 0x6d, 0x2f, 0x68, 0x0, // @363 "km/h"
    0x4c, 0x56, 0x50, 0x42, 0x0, // @368 "LVPB"
    0x53, 0x4f, 0x43, 0x3a, 0x0, // @373 "SOC:"
    0x53, 0x65, 0x67, 0x35, 0x0, // @378 "Seg5"
    0x42, 0x4d, 0x53, 0x31, 0x0, // @383 "BMS1"
    0x54, 0x53, 0x41, 0x4c, 0x0, // @388 "TSAL"
    0x41, 0x49, 0x52, 0x2d, 0x0, // @393 "AIR-"
    0x30, 0x2e, 0x30, 0x0, // @398 "0.0"
    0x49, 0x4d, 0x44, 0x0, // @402 "IMD"
    0x45, 0x43, 0x55, 0x0, // @406 "ECU"
    0x48, 0x56, 0xa, 0x0, // @410 "HV?"
    0x25, 0xa, 0x0, // @414 "%?"
    0x43, 0xa, 0x0, // @417 "C?"
    0x43, 0x0, // @420 "C"
    0x41, 0x0 // @422 "A"
};
TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
