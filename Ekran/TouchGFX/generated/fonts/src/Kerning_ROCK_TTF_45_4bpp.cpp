#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_ROCK_TTF_45_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x002E, -4 },  // (First char = [0x002E, period], Second char = [0x0020, space], Kerning dist = -4)
    { 0x0054, -6 },  // (First char = [0x0054, T], Second char = [0x002D, hyphen], Kerning dist = -6)
    { 0x0056, -5 },  // (First char = [0x0056, V], Second char = [0x002D, hyphen], Kerning dist = -5)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0043, -2 },  // (First char = [0x0043, C], Second char = [0x002E, period], Kerning dist = -2)
    { 0x004E, -2 },  // (First char = [0x004E, N], Second char = [0x002E, period], Kerning dist = -2)
    { 0x004F, -4 },  // (First char = [0x004F, O], Second char = [0x002E, period], Kerning dist = -4)
    { 0x0050, -6 },  // (First char = [0x0050, P], Second char = [0x002E, period], Kerning dist = -6)
    { 0x0053, -1 },  // (First char = [0x0053, S], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x002E, period], Kerning dist = -4)
    { 0x0055, -3 },  // (First char = [0x0055, U], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0056, -8 },  // (First char = [0x0056, V], Second char = [0x002E, period], Kerning dist = -8)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0066,  2 },  // (First char = [0x0066, f], Second char = [0x002E, period], Kerning dist = 2)
    { 0x0067, -2 },  // (First char = [0x0067, g], Second char = [0x002E, period], Kerning dist = -2)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0072, -3 },  // (First char = [0x0072, r], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0076, -4 },  // (First char = [0x0076, v], Second char = [0x002E, period], Kerning dist = -4)
    { 0x0077, -4 },  // (First char = [0x0077, w], Second char = [0x002E, period], Kerning dist = -4)
    { 0x0079, -4 },  // (First char = [0x0079, y], Second char = [0x002E, period], Kerning dist = -4)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0041, A], Kerning dist = -1)
    { 0x004E, -1 },  // (First char = [0x004E, N], Second char = [0x0041, A], Kerning dist = -1)
    { 0x004F, -3 },  // (First char = [0x004F, O], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x004F, O], Kerning dist = -2)
    { 0x0020, -2 },  // (First char = [0x0020, space], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0055, U], Kerning dist = -1)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0055, U], Kerning dist = -1)
    { 0x0020, -4 },  // (First char = [0x0020, space], Second char = [0x0056, V], Kerning dist = -4)
    { 0x0041, -3 },  // (First char = [0x0041, A], Second char = [0x0056, V], Kerning dist = -3)
    { 0x004C, -4 },  // (First char = [0x004C, L], Second char = [0x0056, V], Kerning dist = -4)
    { 0x004F, -3 },  // (First char = [0x004F, O], Second char = [0x0056, V], Kerning dist = -3)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0056, -5 },  // (First char = [0x0056, V], Second char = [0x0061, a], Kerning dist = -5)
    { 0x0066,  1 },  // (First char = [0x0066, f], Second char = [0x0061, a], Kerning dist = 1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0072, -2 },  // (First char = [0x0072, r], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0072, -2 },  // (First char = [0x0072, r], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0056, -5 },  // (First char = [0x0056, V], Second char = [0x0065, e], Kerning dist = -5)
    { 0x0066,  1 },  // (First char = [0x0066, f], Second char = [0x0065, e], Kerning dist = 1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0072, -2 },  // (First char = [0x0072, r], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0078, -2 },  // (First char = [0x0078, x], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0054,  1 },  // (First char = [0x0054, T], Second char = [0x0068, h], Kerning dist = 1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0068, h], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0069, i], Kerning dist = 1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x006C, l], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x006E, n], Kerning dist = 1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -3)
    { 0x0056, -5 },  // (First char = [0x0056, V], Second char = [0x006F, o], Kerning dist = -5)
    { 0x0066,  1 },  // (First char = [0x0066, f], Second char = [0x006F, o], Kerning dist = 1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0072, -2 },  // (First char = [0x0072, r], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0077, -2 },  // (First char = [0x0077, w], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x006F, o], Kerning dist = -2)
    { 0x007A, -1 },  // (First char = [0x007A, z], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0070, p], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0072, r], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0074, t], Kerning dist = 1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0075, u], Kerning dist = -2)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0075, u], Kerning dist = 1)
    { 0x0041, -3 },  // (First char = [0x0041, A], Second char = [0x0076, v], Kerning dist = -3)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0065, -2 },  // (First char = [0x0065, e], Second char = [0x0076, v], Kerning dist = -2)
    { 0x0069, -1 },  // (First char = [0x0069, i], Second char = [0x0076, v], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0076, v], Kerning dist = -1)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0076, v], Kerning dist = -2)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0076, v], Kerning dist = 1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0077, w], Kerning dist = -1)
    { 0x006C, -1 },  // (First char = [0x006C, l], Second char = [0x0077, w], Kerning dist = -1)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0077, w], Kerning dist = -2)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0078, x], Kerning dist = -2)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0079, y], Kerning dist = -2)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0064, -1 },  // (First char = [0x0064, d], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0065, -2 },  // (First char = [0x0065, e], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006C, -1 },  // (First char = [0x006C, l], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0079, y], Kerning dist = 1)
};
